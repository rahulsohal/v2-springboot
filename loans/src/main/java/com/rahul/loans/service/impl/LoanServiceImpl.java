package com.rahul.loans.service.impl;import com.rahul.loans.constants.LoansConstants;import com.rahul.loans.dto.LoansDto;import com.rahul.loans.entity.Loans;import com.rahul.loans.exception.LoanAlreadyExistsException;import com.rahul.loans.exception.ResourceNotFoundException;import com.rahul.loans.mapper.LoansMapper;import com.rahul.loans.repository.LoansRepository;import com.rahul.loans.service.ILoansService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.Optional;import java.util.Random;@Service@AllArgsConstructorpublic class LoanServiceImpl implements ILoansService {    private LoansRepository loansRepository;    /**     *     * @param mobileNumber - Mobile Number of the Customer     */    @Override    public void createLoan(String mobileNumber) {        Optional<Loans> loansOptional = loansRepository.findByMobileNumber(mobileNumber);        if(loansOptional.isPresent()) {            throw new LoanAlreadyExistsException("Loan already exists with mobile number " + mobileNumber);        }        loansRepository.save(createNewLoans(mobileNumber));    }    private Loans createNewLoans(String mobileNumber) {        Loans newLoan = new Loans();        long randomNumber = 100000000000L + new Random().nextLong(9999000000L);        newLoan.setMobileNumber(mobileNumber);        newLoan.setLoanNumber(String.valueOf(randomNumber));        newLoan.setLoanType(LoansConstants.HOME_LOAN);        newLoan.setTotalLoan(LoansConstants.NEW_LOAN_LIMIT);        newLoan.setAmountPaid(0);        newLoan.setOutstandingAmount(LoansConstants.NEW_LOAN_LIMIT);        return newLoan;    }    /**     *     * @param mobileNumber - Input mobile Number     * @return Loan Details based on a given mobileNumber     */    @Override    public LoansDto fetchLoan(String mobileNumber) {        Loans loans = loansRepository.findByMobileNumber(mobileNumber).orElseThrow(                () -> new ResourceNotFoundException("Loan", "loanNumber", mobileNumber)        );        return LoansMapper.mapToLoansDto(loans, new LoansDto());    }    /**     *     * @param loansDto - LoansDto Object     * @return boolean indicating if the update of card details is successful or not     */    @Override    public boolean updateLoan(LoansDto loansDto) {        Loans loans = loansRepository.findByLoanNumber(loansDto.getLoanNumber()).orElseThrow(                () -> new ResourceNotFoundException("Loan", "loanNumber", loansDto.getLoanNumber())        );        LoansMapper.mapToLoans(loansDto, loans);        loansRepository.save(loans);        return true;    }    /**     *     * @param mobileNumber - Input Mobile Number     * @return boolean indicating if the delete of loan details is successful or not     */    @Override    public boolean deleteLoan(String mobileNumber) {        Loans loans = loansRepository.findByMobileNumber(mobileNumber).orElseThrow(                () -> new ResourceNotFoundException("Loan", "mobileNumber", mobileNumber)        );        loansRepository.delete(loans);        return true;    }}