package com.rahul.loans.controller;import com.rahul.loans.constants.LoansConstants;import com.rahul.loans.dto.ErrorResponseDto;import com.rahul.loans.dto.LoansContactInfo;import com.rahul.loans.dto.LoansDto;import com.rahul.loans.dto.ResponseDto;import com.rahul.loans.service.ILoansService;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.media.Content;import io.swagger.v3.oas.annotations.media.Schema;import io.swagger.v3.oas.annotations.responses.ApiResponse;import io.swagger.v3.oas.annotations.responses.ApiResponses;import io.swagger.v3.oas.annotations.tags.Tag;import jakarta.validation.Valid;import jakarta.validation.constraints.Pattern;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;@Tag(        name = "CRUD REST APIs for Loans in Bank",        description = "CRUD REST APIs to CREATE, UPDATE, FETCH AND DELETE loan details")@RestController@RequestMapping(path = "/v1/loans", produces = MediaType.APPLICATION_JSON_VALUE)@Validatedpublic class LoansController {    private final ILoansService iLoansService;    public LoansController(ILoansService iLoansService) {        this.iLoansService = iLoansService;    }    @Value("${build.version}")    private String buildVersion;    @Autowired    private LoansContactInfo loansContactInfo;    @Operation(            summary = "Create Loan REST API",            description = "REST API to create new loan inside EazyBank"    )    @ApiResponses({            @ApiResponse(                    responseCode = "201",                    description = "HTTP Status CREATED"            ),            @ApiResponse(                    responseCode = "500",                    description = "HTTP Status Internal Server Error",                    content = @Content(                            schema = @Schema(implementation = ErrorResponseDto.class)                    )            )    }    )    @PostMapping("/create")    public ResponseEntity<ResponseDto> createLoan(@RequestParam                                                      @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits")                                                      String mobileNumber) {        iLoansService.createLoan(mobileNumber);        return ResponseEntity                .status(HttpStatus.CREATED)                .body(new ResponseDto(LoansConstants.STATUS_201, LoansConstants.MESSAGE_201));    }    @Operation(            summary = "Fetch Loan Details REST API",            description = "REST API to fetch loan details based on a mobile number"    )    @ApiResponses({            @ApiResponse(                    responseCode = "200",                    description = "HTTP Status OK"            ),            @ApiResponse(                    responseCode = "500",                    description = "HTTP Status Internal Server Error",                    content = @Content(                            schema = @Schema(implementation = ErrorResponseDto.class)                    )            )    }    )    @GetMapping("/fetch")    public ResponseEntity<LoansDto> fetchLoan(@RequestParam                                                     @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits")                                                     String mobileNumber) {        LoansDto loansDto = iLoansService.fetchLoan(mobileNumber);        return ResponseEntity                .status(HttpStatus.OK)                .body(loansDto);    }    @Operation(            summary = "Update Loan Details REST API",            description = "REST API to update loan details based on a loan number"    )    @ApiResponses({            @ApiResponse(                    responseCode = "200",                    description = "HTTP Status OK"            ),            @ApiResponse(                    responseCode = "417",                    description = "Expectation Failed"            ),            @ApiResponse(                    responseCode = "500",                    description = "HTTP Status Internal Server Error",                    content = @Content(                            schema = @Schema(implementation = ErrorResponseDto.class)                    )            )    }    )    @PutMapping("/update")    public ResponseEntity<ResponseDto> updateLoan(@Valid @RequestBody LoansDto loansDto) {        boolean isUpdated = iLoansService.updateLoan(loansDto);        if (isUpdated) {            return ResponseEntity                    .status(HttpStatus.OK)                    .body(new ResponseDto(LoansConstants.STATUS_200, LoansConstants.MESSAGE_200));        } else {            return ResponseEntity                    .status(HttpStatus.EXPECTATION_FAILED)                    .body(new ResponseDto(LoansConstants.STATUS_417, LoansConstants.STATUS_417));        }    }    @Operation(            summary = "Delete Loan Details REST API",            description = "REST API to delete Loan details based on a mobile number"    )    @ApiResponses({            @ApiResponse(                    responseCode = "200",                    description = "HTTP Status OK"            ),            @ApiResponse(                    responseCode = "417",                    description = "Expectation Failed"            ),            @ApiResponse(                    responseCode = "500",                    description = "HTTP Status Internal Server Error",                    content = @Content(                            schema = @Schema(implementation = ErrorResponseDto.class)                    )            )    }    )    @DeleteMapping("/delete")    public ResponseEntity<ResponseDto> deleteLoan(@RequestParam                                                      @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits")                                                      String mobileNumber) {        boolean isDeleted = iLoansService.deleteLoan(mobileNumber);        if (isDeleted) {            return ResponseEntity                    .status(HttpStatus.OK)                    .body(new ResponseDto(LoansConstants.STATUS_200, LoansConstants.MESSAGE_200));        } else {            return ResponseEntity                    .status(HttpStatus.OK)                    .body(new ResponseDto(LoansConstants.STATUS_417, LoansConstants.STATUS_417));        }    }    @Operation(            summary = "Fetch Build version",            description = "REST API to fetch build version from profile"    )    @ApiResponses({            @ApiResponse(                    responseCode = "200",                    description = "HTTP Status OK"            ),            @ApiResponse(                    responseCode = "500",                    description = "HTTP Status Internal Server Error",                    content = @Content(                            schema = @Schema(implementation = ErrorResponseDto.class)                    )            )    }    )    @GetMapping("/build-version")    public ResponseEntity<String> getBuildVersion() {        return ResponseEntity                .status(HttpStatus.OK)                .body(buildVersion);    }    @Operation(            summary = "Fetch Contact info",            description = "REST API to fetch contact info from profile"    )    @ApiResponses({            @ApiResponse(                    responseCode = "200",                    description = "HTTP Status OK"            ),            @ApiResponse(                    responseCode = "500",                    description = "HTTP Status Internal Server Error",                    content = @Content(                            schema = @Schema(implementation = ErrorResponseDto.class)                    )            )    }    )    @GetMapping("/contact-info")    public ResponseEntity<LoansContactInfo> getContactInfo() {        return ResponseEntity                .status(HttpStatus.OK)                .body(loansContactInfo);    }}