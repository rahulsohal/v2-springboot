package com.rahul.accounts.service;import com.rahul.accounts.constants.AccountsConstants;import com.rahul.accounts.dto.AccountsDto;import com.rahul.accounts.dto.CustomerDto;import com.rahul.accounts.entity.Accounts;import com.rahul.accounts.entity.Customer;import com.rahul.accounts.exception.CustomerAlreadyExistException;import com.rahul.accounts.exception.ResourceNotFoundException;import com.rahul.accounts.mapper.AccountsMapper;import com.rahul.accounts.mapper.CustomerMapper;import com.rahul.accounts.repository.AccountsRepository;import com.rahul.accounts.repository.CustomerRepository;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.Optional;import java.util.Random;@Service@AllArgsConstructorpublic class AccountServiceImpl implements IAccountService {    private AccountsRepository accountsRepository;    private CustomerRepository customerRepository;    /**     *     * @param customerDto - CustomerDto Object     */    @Override    public void createAccount(CustomerDto customerDto) {        Customer customer = CustomerMapper.mapToCustomer(customerDto, new Customer());        Optional<Customer> optionalCustomer = customerRepository.findByMobileNumber(customer.getMobileNumber());        if (optionalCustomer.isPresent()) {            throw new CustomerAlreadyExistException("Customer with mobile number " + customer.getMobileNumber() + " already exists");        }        Customer savedCustomer = customerRepository.save(customer);        accountsRepository.save(createNewAccount(savedCustomer));    }    private Accounts createNewAccount(Customer customer) {        Accounts newAccount = new Accounts();        newAccount.setCustomerId(customer.getCustomerId());        long randomAccountNumber = 1400000000L + new Random().nextLong(100000000L);        newAccount.setAccountNumber(randomAccountNumber);        newAccount.setAccountType(AccountsConstants.SAVINGS);        newAccount.setBranchAddress(AccountsConstants.ADDRESS);        return newAccount;    }    /**     *     * @param mobileNumber     * @return     */    @Override    public CustomerDto getAccount(String mobileNumber) {        Customer customer = customerRepository.findByMobileNumber(mobileNumber).orElseThrow(                () -> new ResourceNotFoundException("Customer", "Mobile Number", mobileNumber)        );        Accounts accounts = accountsRepository.findByCustomerId(customer.getCustomerId()).orElseThrow(                () -> new ResourceNotFoundException("Account", "Customer Id", customer.getCustomerId().toString())        );        CustomerDto customerDto = CustomerMapper.mapToCustomerDto(customer, new CustomerDto());        customerDto.setAccountsDto(AccountsMapper.mapToAccountsDto(accounts, new AccountsDto()));        return customerDto;        }    /**     *     * @param customerDto     * @return Updated customerDto     */    @Override    public boolean updateAccount(CustomerDto customerDto) {        boolean isUpdated = false;        AccountsDto accountsDto = customerDto.getAccountsDto();        if (accountsDto != null) {            Accounts accounts = accountsRepository.findById(accountsDto.getAccountNumber()).orElseThrow(                    () -> new ResourceNotFoundException("Accounts", "Account number", accountsDto.getAccountNumber().toString())            );            AccountsMapper.mapToAccounts(accountsDto, accounts);            Accounts savedAccounts = accountsRepository.save(accounts);            Long customerId = savedAccounts.getCustomerId();            Customer customer = customerRepository.findById(customerId).orElseThrow(                    () -> new ResourceNotFoundException("Customer", "Customer Id", customerId.toString())            );            CustomerMapper.mapToCustomer(customerDto, customer);            customerRepository.save(customer);            isUpdated = true;        }        return isUpdated;    }    /**     *     * @param mobileNumber     * @return true if account is deleted     */    @Override    public boolean deleteAccount(String mobileNumber) {        Customer customer = customerRepository.findByMobileNumber(mobileNumber).orElseThrow(                () -> new ResourceNotFoundException("Customer", "Mobile Number", mobileNumber)        );        accountsRepository.deleteByCustomerId(customer.getCustomerId());        customerRepository.deleteById(customer.getCustomerId());        return true;    }}