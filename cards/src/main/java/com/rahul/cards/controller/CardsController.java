package com.rahul.cards.controller;import com.rahul.cards.constants.CardsConstants;import com.rahul.cards.dto.CardsContactInfo;import com.rahul.cards.dto.CardsDto;import com.rahul.cards.dto.ResponseDto;import com.rahul.cards.service.ICardsService;import jakarta.validation.Valid;import jakarta.validation.constraints.Pattern;import lombok.AllArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping(value = "/v1/cards", produces = MediaType.APPLICATION_JSON_VALUE)@Validatedpublic class CardsController {    private final ICardsService cardsService;    @Value("${build.version}")    private String buildVersion;    @Autowired    private CardsContactInfo accountsContactInfo;    @Autowired    private CardsContactInfo cardsContactInfo;    public CardsController(ICardsService cardsService) {        this.cardsService = cardsService;    }    @PostMapping("/create")    public ResponseEntity<ResponseDto> createCard(@RequestParam                                                      @Pattern(regexp = "(^$|[0-9]{10})", message = "Mobile number must be 10 digits")                                                      String mobileNumber) {        cardsService.createCards(mobileNumber);        return ResponseEntity                .status(HttpStatus.CREATED)                .body(new ResponseDto(CardsConstants.STATUS_201, CardsConstants.MESSAGE_201));    }    @GetMapping("/fetch")    public ResponseEntity<CardsDto> fetchCard(@RequestParam                                                  @Pattern(regexp = "(^$|[0-9]{10})", message = "Mobile number must be 10 digits")                                                  String mobileNumber) {        CardsDto cardsDto = cardsService.fetchCards(mobileNumber);        return  ResponseEntity                .status(HttpStatus.OK)                .body(cardsDto);    }    @PutMapping("/update")    public ResponseEntity<ResponseDto> updateCard(@Valid @RequestBody CardsDto cardsDto) {        boolean isUpdated = cardsService.updateCards(cardsDto);        if (isUpdated) {            return ResponseEntity                    .status(HttpStatus.OK)                    .body(new ResponseDto(CardsConstants.STATUS_200, CardsConstants.MESSAGE_200));        } else {            return ResponseEntity                    .status(HttpStatus.EXPECTATION_FAILED)                    .body(new ResponseDto(CardsConstants.STATUS_417, CardsConstants.MESSAGE_417_UPDATE));        }    }    @DeleteMapping    public ResponseEntity<ResponseDto> deleteCard(@Valid @RequestParam String mobileNumber) {        boolean isDeleted = cardsService.deleteCards(mobileNumber);        if (isDeleted) {            return ResponseEntity                    .status(HttpStatus.OK)                    .body(new ResponseDto(CardsConstants.STATUS_200, CardsConstants.MESSAGE_200));        } else {            return ResponseEntity                    .status(HttpStatus.EXPECTATION_FAILED)                    .body(new ResponseDto(CardsConstants.STATUS_417, CardsConstants.MESSAGE_417_DELETE));        }    }    @GetMapping("/build-version")    public ResponseEntity<String> getBuildVersion() {        return ResponseEntity                .status(HttpStatus.OK)                .body(buildVersion);    }    @GetMapping("/contact-info")    public ResponseEntity<CardsContactInfo> getCardsContactInfo() {        return ResponseEntity                .status(HttpStatus.OK)                .body(cardsContactInfo);    }}