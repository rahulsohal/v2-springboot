package com.rahul.cards.service.impl;import com.rahul.cards.constants.CardsConstants;import com.rahul.cards.dto.CardsDto;import com.rahul.cards.entity.Cards;import com.rahul.cards.exception.CardsAlreadyExistsException;import com.rahul.cards.exception.ResourceNotFoundException;import com.rahul.cards.mapper.CardsMapper;import com.rahul.cards.repository.CardsRepository;import com.rahul.cards.service.ICardsService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.Optional;import java.util.Random;@Service@AllArgsConstructorpublic class CardsServiceImpl implements ICardsService {    private final CardsRepository cardsRepository;    /**     * Create a cards details for the mobile number     *     * @param mobileNumber     */    @Override    public void createCards(String mobileNumber) {        Optional<Cards> cardsOptional = cardsRepository.findCardsByMobileNumber(mobileNumber);        if (cardsOptional.isPresent()) {            throw new CardsAlreadyExistsException("Cards already exists for mobile number " + mobileNumber);        }        cardsRepository.save(createNewCards(mobileNumber));    }    private Cards createNewCards(String mobileNumber) {        Cards newCard = new Cards();        long randomNumber = 100000000000L + new Random().nextLong(9999900000L);        newCard.setMobileNumber(mobileNumber);        newCard.setCardNumber(String.valueOf(randomNumber));        newCard.setCardType(CardsConstants.CREDIT_CARD);        newCard.setTotalLimit(CardsConstants.NEW_CARD_LIMIT);        newCard.setAmountUsed(0);        newCard.setAvailableAmount(CardsConstants.NEW_CARD_LIMIT);        return newCard;    }    /**     *     * @param mobileNumber     * @return Card details     */    @Override    public CardsDto fetchCards(String mobileNumber) {        Cards cards = cardsRepository.findCardsByMobileNumber(mobileNumber).orElseThrow(                () -> new ResourceNotFoundException(String.format("%s with %s %s not found", "Card", "mobile number", mobileNumber))        );        return CardsMapper.cardstoDto(cards, new CardsDto());    }    /**     * updates cards information except card number     *     * @param cardsDto     * @return true if card details are updated     */    @Override    public boolean updateCards(CardsDto cardsDto) {        boolean isUpdated = false;        Cards cards = cardsRepository.findCardsByMobileNumber(cardsDto.getMobileNumber()).orElseThrow(                () -> new ResourceNotFoundException(String.format("%s with %s %s not found", "Card", "mobile number", cardsDto.getMobileNumber()))        );        CardsMapper.cardsDtotoCards(cardsDto, cards);        cardsRepository.save(cards);        isUpdated = true;        return isUpdated;    }    /**     * Delete cards details linked to the mobile number     *     * @param mobileNumber     * @return     */    @Override    public boolean deleteCards(String mobileNumber) {        boolean isDeleted = false;        Cards cards = cardsRepository.findCardsByMobileNumber(mobileNumber).orElseThrow(                () -> new ResourceNotFoundException(String.format("%s with %s %s not found", "Card", "mobile number", mobileNumber))        );        cardsRepository.delete(cards);        isDeleted = true;        return isDeleted;    }}